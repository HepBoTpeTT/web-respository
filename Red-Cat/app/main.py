from fastapi import FastAPI, Request, HTTPException
from sqladmin import Admin
from app.db.session import engine
from app.admin.views import UserAdmin, OrderAdmin
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse

from fastapi import Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.models.orders import Orders
from app.db.session import AsyncSessionLocal
from pydantic import BaseModel, Field
from typing import Optional

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin = Admin(app, engine)
admin.add_view(UserAdmin)
admin.add_view(OrderAdmin)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


# üì¶ Pydantic-—Å—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
class OrderCreate(BaseModel):
    name: str
    contact_phone: str
    area: float = Field(ge=0)
    canvas_type: Optional[str] = ""
    comment: Optional[str] = ""


# ‚öôÔ∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
async def get_db_session() -> AsyncSession:
    async with AsyncSessionLocal() as session:
        yield session


# üöÄ POST /apply
@app.post("/apply")
async def apply_order(
    order: OrderCreate,
    db: AsyncSession = Depends(get_db_session)
):
    try:
        new_order = Orders(
            name=order.name,
            contact_phone=order.contact_phone,
            area=order.area,
            canvas_type=order.canvas_type,
            comment=order.comment,
        )
        db.add(new_order)
        await db.commit()
        await db.refresh(new_order)
        return JSONResponse(status_code=200, content={"message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"})    
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")